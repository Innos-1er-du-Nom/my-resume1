name: build push and deploy image

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE: ${{ secrets.AWS_ACTION_ROLE }}
  ECR_REPO_NAME: dev
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: AWS creds config
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }} .
      
      #- name: Scan Docker image for vulnerabilities
      #  uses: aquasecurity/trivy-action@master
      #  with:
      #    image-ref: "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}"
      #    format: "table"
       #   exit-code: "1"
        #  severity: "CRITICAL,HIGH"

      - name: Push image to ECR
        run: |
          docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}

      - name: Store image URI in GitHub env
        run: echo "Image=${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

## added code

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      CLUSTER_NAME: my-ecs-cluster
      SERVICE_NAME: my-ecs-service
      CONTAINER_NAME: my-container-name
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get current ECS task definition
        id: get-task-def
        run: |
          aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME \
            --query "services[0].taskDefinition" --output text > task_definition_arn.txt
          echo "TASK_DEFINITION_ARN=$(cat task_definition_arn.txt)" >> $GITHUB_ENV
